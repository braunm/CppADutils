// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// dgamma_test
NumericVector dgamma_test(NumericVector X_, NumericVector R_, NumericVector A_);
RcppExport SEXP CppADutils_dgamma_test(SEXP X_SEXP, SEXP R_SEXP, SEXP A_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R_(R_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A_(A_SEXP);
    rcpp_result_gen = Rcpp::wrap(dgamma_test(X_, R_, A_));
    return rcpp_result_gen;
END_RCPP
}
// LDLT_test
List LDLT_test(const NumericMatrix& A_);
RcppExport SEXP CppADutils_LDLT_test(SEXP A_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A_(A_SEXP);
    rcpp_result_gen = Rcpp::wrap(LDLT_test(A_));
    return rcpp_result_gen;
END_RCPP
}
// LKJ_test
List LKJ_test(NumericVector Y_, double eta_, int K);
RcppExport SEXP CppADutils_LKJ_test(SEXP Y_SEXP, SEXP eta_SEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y_(Y_SEXP);
    Rcpp::traits::input_parameter< double >::type eta_(eta_SEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(LKJ_test(Y_, eta_, K));
    return rcpp_result_gen;
END_RCPP
}
// LKJ_const
double LKJ_const(double eta, int K);
RcppExport SEXP CppADutils_LKJ_const(SEXP etaSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(LKJ_const(eta, K));
    return rcpp_result_gen;
END_RCPP
}
// MatNorm_test
double MatNorm_test(NumericMatrix X_, NumericMatrix M_, NumericMatrix chol_U_, NumericMatrix chol_V_, bool isPrec);
RcppExport SEXP CppADutils_MatNorm_test(SEXP X_SEXP, SEXP M_SEXP, SEXP chol_U_SEXP, SEXP chol_V_SEXP, SEXP isPrecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type M_(M_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type chol_U_(chol_U_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type chol_V_(chol_V_SEXP);
    Rcpp::traits::input_parameter< bool >::type isPrec(isPrecSEXP);
    rcpp_result_gen = Rcpp::wrap(MatNorm_test(X_, M_, chol_U_, chol_V_, isPrec));
    return rcpp_result_gen;
END_RCPP
}
// MatNorm_sparse_test
double MatNorm_sparse_test(NumericMatrix X_, NumericMatrix M_, S4 U_, S4 V_, bool isPrec);
RcppExport SEXP CppADutils_MatNorm_sparse_test(SEXP X_SEXP, SEXP M_SEXP, SEXP U_SEXP, SEXP V_SEXP, SEXP isPrecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type M_(M_SEXP);
    Rcpp::traits::input_parameter< S4 >::type U_(U_SEXP);
    Rcpp::traits::input_parameter< S4 >::type V_(V_SEXP);
    Rcpp::traits::input_parameter< bool >::type isPrec(isPrecSEXP);
    rcpp_result_gen = Rcpp::wrap(MatNorm_sparse_test(X_, M_, U_, V_, isPrec));
    return rcpp_result_gen;
END_RCPP
}
// MVN_test
NumericVector MVN_test(NumericMatrix X_, NumericMatrix mu_, NumericMatrix G_, bool isPrec);
RcppExport SEXP CppADutils_MVN_test(SEXP X_SEXP, SEXP mu_SEXP, SEXP G_SEXP, SEXP isPrecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mu_(mu_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type G_(G_SEXP);
    Rcpp::traits::input_parameter< bool >::type isPrec(isPrecSEXP);
    rcpp_result_gen = Rcpp::wrap(MVN_test(X_, mu_, G_, isPrec));
    return rcpp_result_gen;
END_RCPP
}
// Sparse_MVN_test
NumericVector Sparse_MVN_test(NumericMatrix X_, NumericMatrix mu_, Rcpp::S4 S_, bool isPrec);
RcppExport SEXP CppADutils_Sparse_MVN_test(SEXP X_SEXP, SEXP mu_SEXP, SEXP S_SEXP, SEXP isPrecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mu_(mu_SEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type S_(S_SEXP);
    Rcpp::traits::input_parameter< bool >::type isPrec(isPrecSEXP);
    rcpp_result_gen = Rcpp::wrap(Sparse_MVN_test(X_, mu_, S_, isPrec));
    return rcpp_result_gen;
END_RCPP
}
// invlogit
Rcpp::NumericVector invlogit(const NumericVector& X);
RcppExport SEXP CppADutils_invlogit(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(invlogit(X));
    return rcpp_result_gen;
END_RCPP
}
// log1pmx
Rcpp::NumericVector log1pmx(const NumericVector& X);
RcppExport SEXP CppADutils_log1pmx(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(log1pmx(X));
    return rcpp_result_gen;
END_RCPP
}
// loginvlogit
Rcpp::NumericVector loginvlogit(const NumericVector& X);
RcppExport SEXP CppADutils_loginvlogit(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(loginvlogit(X));
    return rcpp_result_gen;
END_RCPP
}
// log1pexp
Rcpp::NumericVector log1pexp(const NumericVector& X);
RcppExport SEXP CppADutils_log1pexp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(log1pexp(X));
    return rcpp_result_gen;
END_RCPP
}
// lgamma1p
Rcpp::NumericVector lgamma1p(const NumericVector& X);
RcppExport SEXP CppADutils_lgamma1p(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(lgamma1p(X));
    return rcpp_result_gen;
END_RCPP
}
// lgammaexp
Rcpp::NumericVector lgammaexp(const NumericVector& X);
RcppExport SEXP CppADutils_lgammaexp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(lgammaexp(X));
    return rcpp_result_gen;
END_RCPP
}
// CppADutils_tests
void CppADutils_tests(const NumericVector& X);
RcppExport SEXP CppADutils_CppADutils_tests(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    CppADutils_tests(X);
    return R_NilValue;
END_RCPP
}
// cppad_lbeta1
Rcpp::List cppad_lbeta1(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_lbeta1(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_lbeta1(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_dnorm_log
Rcpp::List cppad_dnorm_log(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_dnorm_log(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_dnorm_log(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_dbeta_log
Rcpp::List cppad_dbeta_log(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_dbeta_log(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_dbeta_log(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_dlogitbeta_log
Rcpp::List cppad_dlogitbeta_log(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_dlogitbeta_log(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_dlogitbeta_log(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_lgamma1
Rcpp::List cppad_lgamma1(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_lgamma1(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_lgamma1(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_lgamma1p
Rcpp::List cppad_lgamma1p(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_lgamma1p(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_lgamma1p(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_lgammaexp
Rcpp::List cppad_lgammaexp(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_lgammaexp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_lgammaexp(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_log1p
Rcpp::List cppad_log1p(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_log1p(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_log1p(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_expm1
Rcpp::List cppad_expm1(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_expm1(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_expm1(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_log1pexp
Rcpp::List cppad_log1pexp(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_log1pexp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_log1pexp(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_log1pmx
Rcpp::List cppad_log1pmx(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_log1pmx(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_log1pmx(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_loginvlogit
Rcpp::List cppad_loginvlogit(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_loginvlogit(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_loginvlogit(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_invlogit
Rcpp::List cppad_invlogit(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_invlogit(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_invlogit(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_incgamma
Rcpp::List cppad_incgamma(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_incgamma(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_incgamma(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_incbeta
Rcpp::List cppad_incbeta(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_incbeta(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_incbeta(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_incbeta2
Rcpp::List cppad_incbeta2(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_incbeta2(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_incbeta2(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_lgammaLogExp
Rcpp::List cppad_lgammaLogExp(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_lgammaLogExp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_lgammaLogExp(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_dt_log
Rcpp::List cppad_dt_log(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_dt_log(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_dt_log(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_dhalft_log
Rcpp::List cppad_dhalft_log(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_dhalft_log(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_dhalft_log(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_dhalft_log2
Rcpp::List cppad_dhalft_log2(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_dhalft_log2(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_dhalft_log2(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_dnormTrunc0_log
Rcpp::List cppad_dnormTrunc0_log(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_dnormTrunc0_log(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_dnormTrunc0_log(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_atan2a
Rcpp::List cppad_atan2a(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_atan2a(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_atan2a(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_atan2b
Rcpp::List cppad_atan2b(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_atan2b(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_atan2b(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_pnorm_log
Rcpp::List cppad_pnorm_log(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_pnorm_log(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_pnorm_log(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_pnorm
Rcpp::List cppad_pnorm(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_pnorm(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_pnorm(X));
    return rcpp_result_gen;
END_RCPP
}
// cppad_dgamma_log
Rcpp::List cppad_dgamma_log(const NumericVector& X);
RcppExport SEXP CppADutils_cppad_dgamma_log(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cppad_dgamma_log(X));
    return rcpp_result_gen;
END_RCPP
}
// Wish_test
double Wish_test(NumericMatrix X_, double nu_, NumericMatrix S_);
RcppExport SEXP CppADutils_Wish_test(SEXP X_SEXP, SEXP nu_SEXP, SEXP S_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< double >::type nu_(nu_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type S_(S_SEXP);
    rcpp_result_gen = Rcpp::wrap(Wish_test(X_, nu_, S_));
    return rcpp_result_gen;
END_RCPP
}
// Inv_Wish_test
double Inv_Wish_test(NumericMatrix X_, double nu_, NumericMatrix S_);
RcppExport SEXP CppADutils_Inv_Wish_test(SEXP X_SEXP, SEXP nu_SEXP, SEXP S_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< double >::type nu_(nu_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type S_(S_SEXP);
    rcpp_result_gen = Rcpp::wrap(Inv_Wish_test(X_, nu_, S_));
    return rcpp_result_gen;
END_RCPP
}
